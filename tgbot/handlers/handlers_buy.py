import re

# import env as env
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from pyqiwip2p import QiwiP2P

from tgbot.config import db
from tgbot.keyboards.inline import buy_menu, user_menu, start_menu
from tgbot.misc.states import Buy
from tgbot.config import load_config

config = load_config('.env')
p2p = QiwiP2P(auth_key=config.qiwi.close_token)


async def start_buy(message: types.Message, state: FSMContext):
    if await db.check_tg_user_id(int(message.from_user.id)):

        if await state.get_state() is not None:
            await state.finish()
        product_id = int(message.get_args())
        await state.update_data(product_id=product_id)

        product = await db.select_product(product_id)
        photo = product[2]
        description = product[3]
        price = product[4]
        amount = product[5]
        await message.answer_photo(photo=photo, caption=f'–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n'
                                                        f'–¶–µ–Ω–∞: {price}\n'
                                                        f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –Ω–∞–ª–∏—á–∏–∏: {amount}', reply_markup=buy_menu)
    else:
        await message.answer('\n'.join([
            '‚ùå–û—à–∏–±–∫–∞‚ùå',
            'üîí–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!!!üîí',
            '–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑—ã–≤–∞—Ç—å –±–æ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, –ª–∏–±–æ –ø—Ä–æ–π–¥–∏—Ç–µ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ\n',
            '–ï—Å–ª–∏ –≤–∞—Å –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª, —Ç–æ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É\n',
            '–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: https://t.me/test_bot_shop'
        ]), reply_markup=start_menu)


async def buy_product1(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    data = await state.get_data()
    product_id = data['product_id']
    amount = await db.select_amount_id(product_id)
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞(—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)\n'
                              f'–°–µ–π—á–∞—Å –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏: {amount}')
    await Buy.amount.set()


async def buy_product2(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text)
        data = await state.get_data()
        product_id = data['product_id']
        all_amount = await db.select_amount_id(product_id)
        if amount > all_amount:
            await message.answer('‚ùå–í –Ω–∞–ª–∏—á–∏–µ –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–∞‚ùå\n'
                                 f'–°–µ–π—á–∞—Å –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏: {all_amount}')
        else:
            await state.update_data(amount=amount)
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏(–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º)')
            await Buy.delivery.set()
    except ValueError:
        await message.answer('‚ùå–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ‚ùå\n'
                             '–ü—Ä–∏—à–ª–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞(–¶–ï–õ–û–ï –ß–ò–°–õ–û)')


async def buy_product3(message: types.Message, state: FSMContext):
    await state.update_data(delivery=message.text)

    data = await state.get_data()
    product_id = data['product_id']
    user_id = message.from_user.id
    delivery = data['delivery']
    balance = await db.select_balance(user_id)
    price = await db.select_price_id(product_id)
    amount = data['amount']

    if amount * price - balance < 1:
        balance -= amount * price - 1
        discount = amount * price - 1
        sum = 1
    else:
        discount = balance
        sum = amount * price - balance
        balance = 0

    await state.update_data(balance=balance, discount=discount, sum=sum)

    name_product = await db.select_name_product(product_id)
    comment = f'–¢–æ–≤–∞—Ä: {name_product}(–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount})'
    bill = p2p.bill(amount=sum, lifetime=15, comment=comment)

    bill_id = str(bill.bill_id)
    await db.add_payment(user_id, product_id, amount, delivery, 0, bill_id)

    await message.answer('–°–∫–∏–¥–∫–∞ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏–º–µ–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n'
                         '–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–∂–º–∏—Ç–∏ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"\n'
                         f'–ö –æ–ø–ª–∞—Ç–µ {sum} —Ä—É–±–ª–µ–π', reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üí∞–û–ø–ª–∞—Ç–∏—Ç—åüí∞', url=bill.pay_url)],
        [InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data=f'check_{bill_id}')]
    ]))
    await Buy.confirm.set()


async def check_bill(call: types.CallbackQuery, state: FSMContext):
    await call.answer()

    bill_id = call.data[6:]
    if await db.check_bill_id(bill_id):
        if str(p2p.check(bill_id=bill_id).status) == 'PAID':
            await call.message.edit_text('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω\n'
                                         '–ï—Å–ª–∏ —É –≤–∞—Å –±—É–¥—É—Ç –∫–∞–∫–∏–µ —Ç–æ –≤–æ–ø—Ä–æ—Å—ã —Ç–æ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å (–∫–∞–∫–∏–µ —Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç—ã)')
            await call.message.answer('–í–∞—à–∞ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è', reply_markup=user_menu)

            data = await state.get_data()
            balance = data['balance']
            product_id = data['product_id']
            amount = data['amount']
            price = data['sum']
            discount = data['discount']
            user_id = call.from_user.id

            new_amount = await db.select_amount_id(product_id) - amount

            await db.add_payment2(price, discount, product_id)
            await db.update_product_amount_id(product_id, new_amount)
            await db.update_balance(balance, user_id)
            await db.update_pay_status(bill_id, 1)
            if await state.get_state() is not None:
                await state.finish()
        else:
            await call.message.answer('–í—ã –µ—â–µ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –∑–∞–∫–∞–∑')
            if await state.get_state() is not None:
                await state.finish()
    else:
        await call.message.answer('–¢–∞–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
        if await state.get_state() is not None:
            await state.finish()


async def back_user_menu_pay(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    await call.message.delete()
    await call.message.answer('–í–∞—à–∞ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è', reply_markup=user_menu)
    if await state.get_state() is not None:
        await state.finish()


def register_handlers_buy(dp: Dispatcher):
    dp.register_callback_query_handler(buy_product1, text='buy')
    dp.register_message_handler(buy_product2, state=Buy.amount)
    dp.register_message_handler(buy_product3, state=Buy.delivery)
    dp.register_callback_query_handler(check_bill, text_contains='check_', state=Buy.confirm)
    dp.register_callback_query_handler(back_user_menu_pay, text='buy_back', state=Buy)

    dp.register_message_handler(start_buy, CommandStart(deep_link=re.compile(r"^[0-9]{1,3}$")))
